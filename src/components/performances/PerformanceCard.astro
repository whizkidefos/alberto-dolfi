---
interface Props {
  performance: {
    title: string;
    date: string;
    time: string;
    venue: string;
    location: string;
    program: string[];
    image: string;
    ticketUrl?: string;
    description?: string;
  };
  featured?: boolean;
}

const { performance, featured = false } = Astro.props;

function formatDate(dateString: string) {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  }).format(date);
}

// Default fallback image
const fallbackImage = "/images/performances/default-concert-hall.jpg";
---

<article class={`group relative overflow-hidden rounded-xl bg-white dark:bg-gray-900 ${featured ? 'md:col-span-2' : ''}`}>
  <!-- Image Container -->
  <div class="relative aspect-[16/9] w-full overflow-hidden">
    <img
      src={performance.image}
      alt={performance.title}
      class="h-full w-full object-cover transition-transform duration-500 group-hover:scale-105"
      onerror="this.onerror=null; this.src='/images/performances/default-concert-hall.jpg';"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
  </div>

  <!-- Content -->
  <div class="relative p-6">
    <div class="space-y-4">
      <!-- Date Badge -->
      <div class="inline-flex items-center rounded-full bg-accent/10 dark:bg-accent/20 px-3 py-1 text-sm text-accent">
        <span class="mr-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
        </span>
        {formatDate(performance.date)} at {performance.time}
      </div>

      <!-- Title and Location -->
      <div>
        <h3 class="mb-2 text-2xl font-bold font-playfair text-gray-900 dark:text-white">{performance.title}</h3>
        <div class="flex items-center text-gray-600 dark:text-gray-400">
          <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
            <circle cx="12" cy="10" r="3"></circle>
          </svg>
          {performance.venue}, {performance.location}
        </div>
      </div>

      <!-- Description -->
      {performance.description && (
        <p class="text-gray-600 dark:text-gray-400">{performance.description}</p>
      )}

      <!-- Program Preview -->
      <div>
        <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-2">Program:</h4>
        <ul class="space-y-1 text-gray-600 dark:text-gray-400">
          {performance.program.map((piece) => (
            <li class="text-sm">{piece}</li>
          ))}
        </ul>
      </div>

      <!-- Ticket Button -->
      {performance.ticketUrl && (
        <div class="pt-4">
          <a
            href={performance.ticketUrl}
            class="inline-flex items-center rounded-full bg-accent px-6 py-2 text-sm font-medium text-white transition-colors hover:bg-accent/80"
            target="_blank"
            rel="noopener noreferrer"
          >
            Get Tickets
            <svg xmlns="http://www.w3.org/2000/svg" class="ml-2 h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M5 12h14M12 5l7 7-7 7"/>
            </svg>
          </a>
        </div>
      )}
    </div>
  </div>
</article>
